openapi: 3.0.3
info:
  title: WEB-SEM3-BACKEND API
  version: 1.0.0
  description: |
    REST API for the WEB-SEM3 project (Node.js, Express, Prisma, MySQL).

    - Base URL prefix: `/api`
    - Authentication: Bearer JWT. Send header `Authorization: Bearer <token>` for protected routes.
    - Error format: `4xx/5xx { success: false, message: string }`
servers:
  - url: http://localhost:5000/api
    description: Local development
  - url: https://your-domain.tld/api
    description: Production (example)

tags:
  - name: Auth
    description: Authentication endpoints. Login/Register are public; others require JWT.
  - name: Tasks
    description: Task management. All endpoints require JWT.
  - name: Groups
    description: Group management. Requires JWT; write operations might be admin-only.
  - name: Members
    description: Member management. Read for any logged-in user; write for admins.
  - name: Dashboard
    description: Aggregate statistics. Requires JWT.
  - name: Timeline
    description: Latest tasks feed. Requires JWT.
  - name: WebSocket
    description: |
      Socket.IO realtime API (documented briefly here).

      - URL: `http://localhost:5000` (no `/api` prefix)
      - After connect, client should emit `authenticate` with `{ user: { id, name } }`.
      - Emits: `message`, `typing`
      - Receives: `message`, `typing`, `user_joined`, `user_left`

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Something went wrong
      required: [success, message]

    MessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
      required: [success, message]

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, email, role, createdAt, updatedAt]

    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Team Alpha
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, name, createdAt, updatedAt]

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Research API docs
        description:
          type: string
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
          example: 2025-08-04T00:00:00.000Z
        priority:
          type: string
          enum: [low, medium, high]
          example: medium
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: pending
        createdBy:
          type: integer
          format: int64
          example: 1
        assignedTo:
          type: integer
          format: int64
          nullable: true
          example: 2
        groupId:
          type: integer
          format: int64
          nullable: true
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, title, status, priority, createdBy, createdAt, updatedAt]

    AuthRegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [name, email, password]

    AuthLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/User'
      required: [token, user]

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required: [email]

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
          format: password
      required: [token, password]

    TaskCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        priority:
          type: string
          enum: [low, medium, high]
        assignedTo:
          type: integer
          format: int64
          nullable: true
        groupId:
          type: integer
          format: int64
          nullable: true
      required: [title]

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        priority:
          type: string
          enum: [low, medium, high]
        assignedTo:
          type: integer
          format: int64
          nullable: true
        groupId:
          type: integer
          format: int64
          nullable: true

    TaskStatusUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [pending, in_progress, completed]
      required: [status]

    TaskAssignUpdate:
      type: object
      properties:
        assignedTo:
          type: integer
          format: int64
          nullable: true
      required: [assignedTo]

    ApiResponseTaskList:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
      required: [success, data]

    ApiResponseTask:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Task'
      required: [success, data]

    ApiResponseUser:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
      required: [success, data]

    ApiResponseUserList:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required: [success, data]

    ApiResponseGroup:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Group'
      required: [success, data]

    ApiResponseGroupList:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      required: [success, data]

    DashboardStats:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        pendingTasks:
          type: integer
        inProgressTasks:
          type: integer
        totalMembers:
          type: integer
        totalGroups:
          type: integer
        overdueTasks:
          type: integer
      required: [totalTasks, completedTasks, pendingTasks, inProgressTasks, totalMembers, totalGroups, overdueTasks]

    ApiResponseDashboardStats:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/DashboardStats'
      required: [success, data]

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '4XX':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '4XX':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password via token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Tasks]
      summary: Create a task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTask'

  /tasks/my-tasks:
    get:
      tags: [Tasks]
      summary: List tasks created by the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'

  /tasks/assigned:
    get:
      tags: [Tasks]
      summary: List tasks assigned to the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'

  /tasks/group/{groupId}:
    get:
      tags: [Tasks]
      summary: List tasks in a group
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'

  /tasks/search:
    get:
      tags: [Tasks]
      summary: Search tasks
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'

  /tasks/{id}:
    get:
      tags: [Tasks]
      summary: Get a task by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTask'
    put:
      tags: [Tasks]
      summary: Update a task (replace)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTask'
    delete:
      tags: [Tasks]
      summary: Delete a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /tasks/{id}/status:
    patch:
      tags: [Tasks]
      summary: Update task status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTask'

  /tasks/{id}/assign:
    patch:
      tags: [Tasks]
      summary: Assign/unassign user to task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAssignUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTask'

  /groups:
    get:
      tags: [Groups]
      summary: List groups
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseGroupList'
    post:
      tags: [Groups]
      summary: Create a group (admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
              required: [name]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseGroup'

  /groups/{id}:
    get:
      tags: [Groups]
      summary: Get a group by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseGroup'
    put:
      tags: [Groups]
      summary: Update a group (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseGroup'
    delete:
      tags: [Groups]
      summary: Delete a group (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /members:
    get:
      tags: [Members]
      summary: List members
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserList'
    post:
      tags: [Members]
      summary: Create a member (admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'

  /members/{id}:
    get:
      tags: [Members]
      summary: Get a member by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
    put:
      tags: [Members]
      summary: Update a member (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
    delete:
      tags: [Members]
      summary: Delete a member (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /members/group/{groupId}:
    get:
      tags: [Members]
      summary: List members in a group
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserList'

  /dashboard/stats:
    get:
      tags: [Dashboard]
      summary: Get statistics for dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseDashboardStats'

  /timeline:
    get:
      tags: [Timeline]
      summary: Get latest tasks timeline
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTaskList'
